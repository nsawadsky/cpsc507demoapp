// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using CPSC507DemoAppTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace CPSC507DemoApp
{
    public partial class OrderTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost458()
{
    Order order;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    Promotion[] promotions = new Promotion[0];
    costAndApplicablePromotions = this.calculateCost(order, promotions, 0);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost574()
{
    Order order;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    Promotion[] promotions = new Promotion[0];
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost45804()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    CostAndApplicablePromotions costAndApplicablePromotions;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0);
    orderItemAndQuantity = new OrderItemAndQuantity(orderItem, 0);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    Promotion[] promotions = new Promotion[0];
    costAndApplicablePromotions = this.calculateCost(order, promotions, 0);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost65801()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 0);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost35201()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost35202()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 1L, (DateTimeKind)(1uL >> 62)), 
                 orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2305843009213693952L, 
                                                               (DateTimeKind)(2305843009213693952uL >> 62)), default(DateTime), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost35203()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0);
    orderItemAndQuantity = new OrderItemAndQuantity(orderItem, 0);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost35204()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0);
    orderItemAndQuantity = new OrderItemAndQuantity(orderItem, 0);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 3155370179906977790L, 
                              (DateTimeKind)(3155370179906977790uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "\0\0";
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 3155370179906977790L, 
                                                               (DateTimeKind)(3155370179906977790uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 3155370179906977790L, 
                                                               (DateTimeKind)(3155370179906977790uL >> 62)), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost43303()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost43304()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 2434803035629101184L, 
                              (DateTimeKind)(2434803035629101184uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2434803035629101184L, 
                                                               (DateTimeKind)(2434803035629101184uL >> 62)), default(DateTime), 0);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost35205()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0);
    orderItemAndQuantity = new OrderItemAndQuantity(orderItem, 0);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void calculateCost43305()
{
    Order order;
    Promotion promotion;
    CostAndApplicablePromotions costAndApplicablePromotions;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 1025L, (DateTimeKind)(1025uL >> 62)), 
                 orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2305843009213694976L, 
                                                               (DateTimeKind)(2305843009213694976uL >> 62)), default(DateTime), 0);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    costAndApplicablePromotions = this.calculateCost(order, promotions, 1);
    Assert.IsNotNull((object)costAndApplicablePromotions);
    Assert.IsNotNull((object)order);
}
    }
}
