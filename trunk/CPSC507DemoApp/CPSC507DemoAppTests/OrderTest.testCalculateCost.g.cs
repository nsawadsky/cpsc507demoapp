// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using CPSC507DemoAppTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework.Exceptions;

namespace CPSC507DemoApp
{
    public partial class OrderTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost73401()
{
    Order order;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    Promotion[] promotions = new Promotion[0];
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost264()
{
    Order order;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    Promotion[] promotions = new Promotion[0];
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost164()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 1L, (DateTimeKind)(1uL >> 62)), 
                 orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost16407()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 288230522450092041L, 
                              (DateTimeKind)(288230522450092041uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2305843353415123972L, 
                                                               (DateTimeKind)(2305843353415123972uL >> 62)), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost16408()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Electronics, ss, 
                                                  default(DateTime), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost37901()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost78703()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder(default(DateTime), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2305843009213693952L, 
                                                               (DateTimeKind)(2305843009213693952uL >> 62)), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost896()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem =
      PexFactoryMethods.createOrderItem("", ItemCategory.Book, "\0\0", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 4);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 2488846091024797745L, 
                              (DateTimeKind)(2488846091024797745uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "\0\0";
    promotion = PexFactoryMethods.createPromotion("\0\0", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2488846091024797745L, 
                                                               (DateTimeKind)(2488846091024797745uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 2488846091024797745L, 
                                                               (DateTimeKind)(2488846091024797745uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 4);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost498()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 1L, (DateTimeKind)(1uL >> 62)), 
                 orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost49802()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 35184372088833L, 
                              (DateTimeKind)(35184372088833uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 2305878193585782784L, 
                                                               (DateTimeKind)(2305878193585782784uL >> 62)), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost49803()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 7746798796101058570L, 
                              (DateTimeKind)(7746798796101058570uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 3135112777673670666L, 
                                                               (DateTimeKind)(3135112777673670666uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 3135112777673670666L, 
                                                               (DateTimeKind)(3135112777673670666uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost16410()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 105720989377566958L, 
                              (DateTimeKind)(105720989377566958uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 105720989377566958L, 
                                                               (DateTimeKind)(105720989377566958uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 237002278286264555L, 
                                                               (DateTimeKind)(237002278286264555uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost534()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 3028670749408756755L, 
                              (DateTimeKind)(3028670749408756755uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 3028670749408756755L, 
                                                               (DateTimeKind)(3028670749408756755uL >> 62)), default(DateTime), 0.01);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    this.testCalculateCost(order, promotions, 4);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost78702()
{
    Order order;
    Promotion promotion;
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[0];
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 2748756112886212625L, 
                              (DateTimeKind)(2748756112886212625uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 7360442131313600529L, 
                                                               (DateTimeKind)(7360442131313600529uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 2748756112886212625L, 
                                                               (DateTimeKind)(2748756112886212625uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[2];
    promotions[0] = promotion;
    promotions[1] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost49805()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 3155378975999983616L, 
                              (DateTimeKind)(3155378975999983616uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "\0";
    promotion = PexFactoryMethods.createPromotion
                    ("", ItemCategory.Book, ss, default(DateTime), 
                                                new DateTime(4611686018427387903L & 3155378975999983616L, 
                                                             (DateTimeKind)(3155378975999983616uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost49809()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 3155378975999983616L, 
                              (DateTimeKind)(3155378975999983616uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[0];
    promotion = PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, 
                                                  new DateTime(4611686018427387903L & 3155378975999983616L, 
                                                               (DateTimeKind)(3155378975999983616uL >> 62)), 
                                                  new DateTime(4611686018427387903L & 3155378975999983616L, 
                                                               (DateTimeKind)(3155378975999983616uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost16402()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", ItemCategory.Book, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 2);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder(new DateTime
                                              (4611686018427387903L & 16382L, (DateTimeKind)(16382uL >> 62)), 
                                          orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "\0\0";
    promotion =
      PexFactoryMethods.createPromotion("", ItemCategory.Book, ss, new DateTime
                                                                       (4611686018427387903L & 16382L, (DateTimeKind)(16382uL >> 62)), 
                                                                   new DateTime
                                                                       (4611686018427387903L & 16382L, (DateTimeKind)(16382uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost16406()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem
                    ("\ua7b6", ItemCategory.Book, "\0\0\0\u0200@\0@\0\0\0\0", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 18014398513102365L, 
                              (DateTimeKind)(18014398513102365uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "\u0100\u0010\0\0\0\0";
    promotion = PexFactoryMethods.createPromotion
                    ("\u0100\u0010\0\0\0\0", ItemCategory.Book, ss, 
                     new DateTime(4611686018427387903L & 18014398513102365L, 
                                  (DateTimeKind)(18014398513102365uL >> 62)), 
                     new DateTime(4611686018427387903L & 2305843009217314368L, 
                                  (DateTimeKind)(2305843009217314368uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 0);
    Assert.IsNotNull((object)order);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderTest))]
public void testCalculateCost49811()
{
    OrderItem orderItem;
    OrderItemAndQuantity orderItemAndQuantity;
    Order order;
    Promotion promotion;
    orderItem = PexFactoryMethods.createOrderItem("", (ItemCategory)68, "", 0.01);
    orderItemAndQuantity =
      PexFactoryMethods.createOrderItemAndQuantity(orderItem, 1);
    OrderItemAndQuantity[] orderItemAndQuantitys = new OrderItemAndQuantity[1];
    orderItemAndQuantitys[0] = orderItemAndQuantity;
    order = PexFactoryMethods.createOrder
                (new DateTime(4611686018427387903L & 3155370179839868926L, 
                              (DateTimeKind)(3155370179839868926uL >> 62)), orderItemAndQuantitys);
    string[] ss = new string[1];
    ss[0] = "";
    promotion =
      PexFactoryMethods.createPromotion("", (ItemCategory)4, ss, default(DateTime), 
                                                                 new DateTime(4611686018427387903L & 3155370179839868926L, 
                                                                              (DateTimeKind)(3155370179839868926uL >> 62)), 0.01);
    Promotion[] promotions = new Promotion[1];
    promotions[0] = promotion;
    this.testCalculateCost(order, promotions, 1);
    Assert.IsNotNull((object)order);
}
    }
}
